#!/usr/bin/python3 -u

## Copyright (C) 2024 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## A very simple JSON parser that extracts the "version" string from Tor
## Browser update information JSON. Assumes the input JSON could be malicious,
## and is thus hardened against unexpected data.

from pathlib import Path
import argparse
import json
import re
import sys

# Prints a message to stdout unless running in quiet mode.
def print_noisy(msg):
    if args.quiet:
        return
    print(msg, file=sys.stderr)

def tbbversion_x64():
    try:
        input_text = input_path.read_text()
    except:
        print_noisy("ERROR: Cannot read input file!")
        exit(2)

    try:
        input_json = json.loads(input_text)
    except:
        print_noisy("ERROR: JSON parsing failed!")
        exit(3)

    if type(input_json) is not dict:
        print_noisy("ERROR: Rejecting input JSON, did not deserialize to a Python dict!")
        exit(3)

    version_string = input_json.get("version")
    if type(version_string) is not str:
        print_noisy("ERROR: Rejecting input JSON, version object did not deserialize to a Python string!")
        exit(3)

    ## In the event the parser is compromised, this check can't be relied on,
    ## but it harms nothing to include it. Anything that reads from the output
    ## file MUST redo this check.
    if len(version_string) > 10:
        print_noisy("ERROR: Rejecting input JSON, version string is abnormally long!")
        exit(3)

    try:
        with output_path.open(mode = 'w') as f:
            f.writelines([version_string])
    except:
        print_noisy("ERROR: Could not write version string to output file!")
        exit(2)

    exit(0)

argument_parser = argparse.ArgumentParser(prog = "version-parser",
                                          description = "Parses JSON files to find the latest version of Tor Browser.")
argument_parser.add_argument("input_file",
                             action = "store",
                             help = "The JSON file to use as input.")
argument_parser.add_argument("output_file",
                             action = "store",
                             help = "The file to save the latest version of the Tor Browser in, if found.")
argument_parser.add_argument("-q",
                             "--quiet",
                             action = "store_true",
                             help = "Gets rid of verbose status output.")
args = argument_parser.parse_args()

if args.input_file is None:
    print_noisy("ERROR: No input file provided.")
    exit(1)
elif args.output_file is None:
    print_noisy("ERROR: No output file provided.")
    exit(1)

input_path = Path(args.input_file)
output_path = Path(args.output_file)

if not input_path.absolute().as_posix().startswith("/tmp"):
    print_noisy("WARNING: The input file is not under /tmp. This may not work.")
if not output_path.absolute().as_posix().startswith("/tmp"):
    print_noisy("WARNING: The output file is not under /tmp. This may not work.")

if not input_path.exists():
    print_noisy("ERROR: Input file does not exist.")
    exit(2)
else:
    try:
        output_path.touch(mode=0o644, exist_ok=True)
    except:
        print_noisy("ERROR: Cannot access output file.")
        exit(2)

tbbversion_x64()
